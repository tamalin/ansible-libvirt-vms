---
# tasks file for vm creation

- name: Cleanup existing VM {{ libvirt_vm.name }}
  ansible.builtin.include_tasks: cleanup_vm.yml

- name: Install VM backing image
  become: true
  ansible.builtin.copy:
    src: "{{ ubuntu_image.cached }}"
    dest: "{{ libvirt_vm.image.backing }}"
    mode: "0644"
    remote_src: true

- name: Create ignition config file if needed
  ansible.builtin.include_tasks: setup_ignition_config.yml
  when:
    - ubuntu.image.init == "ignition"

- name: Create cloud-init config if needed
  ansible.builtin.include_tasks: setup_cloud_init.yml
  when:
    - ubuntu.image.init == "cloud-init"

- name: Create VM {{ libvirt_vm.name }}
  become: true
  ansible.builtin.command: >-
    virt-install
      --autostart
      --connect qemu:///system
      --import
      --name {{ libvirt_vm.name }}
      --boot hd
      --osinfo {{ libvirt_vm.os_variant }}
      --virt-type kvm
      --hvm
      --machine {{ libvirt_vm.hardware.machine }}
      --ram {{ libvirt_vm.hardware.ram_mb }}
      --vcpus {{ libvirt_vm.hardware.vcpus }}
      --cpu {{ libvirt_vm.hardware.cpu_type }}
      --video {{ libvirt_vm.hardware.video }}
      --console pty,target_type=virtio
      --graphics vnc,listen=0.0.0.0
      --rng /dev/urandom
    {% if libvirt_vm.hardware.bus == 'scsi' %}
      --controller type=scsi,model=virtio-scsi
    {% endif %}
    {% for _net in libvirt_vm.nics %}
    {%   set _netparams = [_net.nettype ~ '=' ~ _net.netdev] %}
    {%   if _net.mac is defined %}
    {%     set _ = _netparams.append('mac=' ~ _net.mac) %}
    {%   endif %}
      --network {{ _netparams | join(',') }}
    {% endfor %}
      --tpm backend.type=emulator,backend.version={{ libvirt_vm.tpm.version }},model={{ libvirt_vm.tpm.model }}
    {% if ubuntu.image.init == "cloud-init" %}
      --disk {{ libvirt_vm.cloud_init.image }},device=cdrom
    {% elif ubuntu.image.init == "ignition" %}
      --sysinfo type=fwcfg,entry0.name="opt/com.coreos/config",entry0.file="{{ libvirt_vm.ignition.file}}"
    {% endif %}
      --disk path={{ libvirt_vm.image.file }},size={{ libvirt_vm.image.size_gb }},backing_store={{
          libvirt_vm.image.backing }},backing_format=qcow2,bus={{ libvirt_vm.hardware.bus }},cache=none,serial={{
          'RND-' ~ (libvirt_vm.name[0:14] | upper) }}
    {% for _disk in libvirt_vm.extra_disks %}
      --disk path={{ libvirt_vm.image.file | replace(libvirt_vm.name, libvirt_vm.name ~ '_' ~ _disk.name) }},size={{
          _disk.size_gb | default(100) }},bus={{ libvirt_vm.hardware.bus }},cache=none,serial={{
            'RND-' ~ (_disk.name[0:14] | upper) }}
    {% endfor %}
      --noautoconsole
  changed_when: false
  register: virt_install_result

- name: Show results for creation of VM {{ libvirt_vm.name }}
  ansible.builtin.debug:
    var: virt_install_result
